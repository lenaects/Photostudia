@page "/services/studio"
@using Microsoft.AspNetCore.Components.Forms
@using PhotoStudia_1.Models
@using PhotoStudia_1.Services
@using Microsoft.EntityFrameworkCore
@inject PhotostudiaContext DbContext
@inject NavigationManager NavigationManager
@inject AdminState AdminState
<style>
    .studio-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        justify-content: center;
    }

    .studio-card {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        width: 600px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transition: transform 0.2s ease;
    }

    .studio-card:hover {
        transform: translateY(-5px);
    }

   .studio-image-slider {
    position: relative;
    width: 100%;
    height: 320px;
    overflow: hidden;
    background-color: #f2f2f2;
    display: flex;
    align-items: center;
    justify-content: center;
}

.slider-track {
    display: flex;
    height: 100%;
    animation: slideImages 15s infinite;
}

.slider-image {
    flex-shrink: 0;
    width: 100%;
    height: 100%;
    object-fit: contain; 
    object-position: center;
    background-color: #fff;
    padding: 10px;
}

    @@keyframes slideImages {
        0% { transform: translateX(0%); }
        33.33% { transform: translateX(-100%); }
        66.66% { transform: translateX(-200%); }
        100% { transform: translateX(0%); }
    }

    .studio-info {
        padding: 20px;
    }

    .studio-info h3 {
        margin: 0;
        font-size: 26px;
        color: #222;
    }

    .studio-info .description {
        margin: 12px 0;
        font-size: 16px;
        color: #555;
    }

    .studio-info .price {
        font-weight: bold;
        font-size: 18px;
        margin-top: 10px;
        color: #333;
    }

    .studio-info .address {
        font-size: 15px;
        color: #666;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: #fff;
        padding: 30px;
        border-radius: 16px;
        width: 600px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    }

    .image-preview-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .image-container {
        position: relative;
    }

        .image-container img {
            height: 80px;
            border-radius: 6px;
        }

    .delete-btn {
        position: absolute;
        top: -8px;
        right: -8px;
        background: #e74c3c;
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
    }

    .modal-actions button {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
    }

        .modal-actions button:first-child {
            background-color: #d1a45f;
            color: white;
        }

        .modal-actions button:last-child {
            background-color: #999;
            color: white;
        }
    .modal {
        background-color: #fff;
        padding: 30px;
        border-radius: 12px;
        width: 500px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }

        .modal input, .modal textarea {
            width: 100%;
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
        }

    .modal-form {
        display: flex;
        flex-direction: column;
        gap: 14px;
    }

        .modal-form input,
        .modal-form textarea {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 15px;
        }

</style>
<div class="studio-page-container">
    <h1 class="studio-page-title">Студийные фотосессии</h1>

    @if (services == null)
    {
        <p>Загрузка...</p>
    }
    else if (!services.Any())
    {
        <p>Нет доступных студийных фотосессий.</p>
    }
    else
    {
        @if (AdminState.IsLoggedIn)
        {
            <div style="text-align: center; margin-bottom: 20px;">
                <button @onclick="OpenAddModal" style="padding: 10px 20px; background-color: #d1a45f; color: white; border: none; border-radius: 6px; font-size: 16px;">
                    + Добавить услугу
                </button>
            </div>
        }
        <div class="studio-grid">
        @foreach (var item in services)
        {
          <div class="studio-card">
    <div class="studio-image-slider">
        @if (item.Images.Any())
        {
            <div class="slider-track" style="width:@(item.Images.Count * 100)%">
                @foreach (var img in item.Images)
                {
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(img)" class="slider-image" />
                }
            </div>
        }
        else
        {
            <div class="studio-placeholder">Нет изображений</div>
        }
    </div>
    <div class="studio-info">
        <h3>@item.Service.Name</h3>
        <p class="description">@item.Service.Description</p>
        <p class="price">Цена: @item.Studio.PricePerHour руб/час</p>
        <p class="address">Адрес: @item.Studio.Address</p>
    </div>
                    @if (AdminState.IsLoggedIn)
                    {
                        <div style="display: flex; justify-content: flex-end; gap: 10px; padding: 0 20px 20px;">
                            <button @onclick="() => EditService(item)" style="padding: 6px 14px; background: #2ecc71; color: white; border: none; border-radius: 6px;">✏</button>
                            <button @onclick="() => DeleteService(item)" style="padding: 6px 14px; background: #e74c3c; color: white; border: none; border-radius: 6px;">🗑</button>
                        </div>
                    }
</div>
        }
    </div>
    }
</div>
@if (ShowModal && AdminState.IsLoggedIn)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>@(IsEditMode ? "Редактирование услуги" : "Добавление услуги")</h2>

            <div class="modal-form">
                <label>Название услуги</label>
                <input placeholder="Название" @bind="EditingService.Service.Name" />

                <label>Описание</label>
                <textarea placeholder="Описание" @bind="EditingService.Service.Description"></textarea>

                <label>Цена за час</label>
                <input type="number" step="0.01" @bind="EditingService.Studio.PricePerHour" placeholder="Цена за час" />

                <label>Адрес</label>
                <input placeholder="Адрес" @bind="EditingService.Studio.Address" />

                <label>Фотографии:</label>
                @if (CurrentImages?.Any() == true)
                {
                    <div class="image-preview-list">
                        @foreach (var img in CurrentImages)
                        {
                            <div class="image-container">
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(img.Image)" />
                                <button class="delete-btn" @onclick="@(() => RemoveImage(img.ImageId))">✖</button>
                            </div>
                        }
                    </div>
                }

                <InputFile OnChange="UploadFiles" multiple />

                @if (NewImages?.Any() == true)
                {
                    <div class="image-preview-list">
                        @foreach (var file in NewImages)
                        {
                            <div>@file.Name</div>
                        }
                    </div>
                }

                <div class="modal-actions">
                    <button @onclick="SaveService">Сохранить</button>
                    <button @onclick="CloseModal">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    bool ShowModal = false;
    bool IsEditing = false;
    StudioServiceViewModel EditModel = new();

    private bool IsEditMode = false;

    private StudioServiceViewModel EditingService = new();
    private List<StudioImage> CurrentImages = new();
    private List<IBrowserFile> NewImages = new();
    private List<StudioServiceViewModel> services = new();
    protected override async Task OnInitializedAsync()
    {
        var studioServices = await DbContext.StudioServices
            .Include(ss => ss.Service)
            .Include(ss => ss.Studio)
                .ThenInclude(s => s.StudioImages)
            .Where(ss => ss.Service != null && ss.Studio != null)
            .ToListAsync();

        services = studioServices.Select(ss => new StudioServiceViewModel
            {
                Service = ss.Service!,
                Studio = ss.Studio!,
                Images = ss.Studio!.StudioImages
                    .Where(img => img.Image != null)
                    .Select(img => img.Image)
                    .ToList()!
            }).ToList();
    }
    public class StudioServiceViewModel
    {
        public Service Service { get; set; } = null!;
        public Studio Studio { get; set; } = null!;
        public List<byte[]> Images { get; set; } = new();
    }
    private void OpenAddModal()
    {
        EditingService = new StudioServiceViewModel
            {
                Service = new Service(),
                Studio = new Studio(),
                Images = new List<byte[]>()
            };
        CurrentImages = new();
        NewImages = new();
        IsEditMode = false;
        ShowModal = true;
    }

    private void EditService(StudioServiceViewModel item)
    {
        EditingService = item;
        CurrentImages = DbContext.StudioImages
            .Where(i => i.StudioId == item.Studio.StudioId)
            .ToList();
        NewImages = new();
        IsEditMode = true;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void RemoveImage(int imageId)
    {
        var image = CurrentImages.FirstOrDefault(i => i.ImageId == imageId);
        if (image != null)
        {
            DbContext.StudioImages.Remove(image);
            CurrentImages.Remove(image);
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            NewImages.Add(file);
        }
    }

    private async Task SaveService()
    {
        if (!IsEditMode)
        {
            DbContext.Services.Add(EditingService.Service);
            DbContext.Studios.Add(EditingService.Studio);
            await DbContext.SaveChangesAsync();

            var link = new StudioService
                {
                    ServiceId = EditingService.Service.Serviceid,
                    StudioId = EditingService.Studio.StudioId
                };
            DbContext.StudioServices.Add(link);
        }

        foreach (var file in NewImages)
        {
            using var stream = file.OpenReadStream(5 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var img = new StudioImage
                {
                    StudioId = EditingService.Studio.StudioId,
                    Image = ms.ToArray()
                };
            DbContext.StudioImages.Add(img);
        }

        await DbContext.SaveChangesAsync();
        ShowModal = false;
        await OnInitializedAsync(); // перезагрузка
    }

    async void DeleteService(StudioServiceViewModel item)
    {
        var studioService = await DbContext.StudioServices.FirstOrDefaultAsync(ss =>
            ss.ServiceId == item.Service.Serviceid && ss.StudioId == item.Studio.StudioId);

        if (studioService != null)
            DbContext.StudioServices.Remove(studioService);

        DbContext.Services.Remove(item.Service);
        DbContext.Studios.Remove(item.Studio);
        await DbContext.SaveChangesAsync();

        await OnInitializedAsync();
    }
}