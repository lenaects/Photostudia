@using System.Globalization
@inject IJSRuntime JS

<input id="@_inputId" class="form-control" />

@code {
    [Parameter] public DateOnly? Value { get; set; }
    [Parameter] public EventCallback<DateOnly?> ValueChanged { get; set; }

    [Parameter] public DateOnly? MinDate { get; set; }
    [Parameter] public DateOnly? MaxDate { get; set; }
    [Parameter] public List<DateOnly>? UnavailableDates { get; set; }

    private string _inputId = $"dp_{Guid.NewGuid():N}";
    private string[] _jsUnavailableDates = Array.Empty<string>();
    private bool _initialized = false;

    protected override async Task OnParametersSetAsync()
    {
        _jsUnavailableDates = UnavailableDates?.Select(d => d.ToString("yyyy-MM-dd")).ToArray()
                              ?? Array.Empty<string>();

        if (_initialized)
        {
            await JS.InvokeVoidAsync("updateDatePicker", _inputId, _jsUnavailableDates);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _initialized = true;
            await JS.InvokeVoidAsync("initDatePicker", _inputId, _jsUnavailableDates, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnDateSelected(string dateStr)
    {
        if (DateTime.TryParse(dateStr, out var dt))
        {
            var dateOnly = DateOnly.FromDateTime(dt);
            await ValueChanged.InvokeAsync(dateOnly);
        }
    }
}